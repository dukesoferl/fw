#! /usr/bin/perl

use File::Basename;

BEGIN {
  unshift @INC, dirname ($0);
};

use FwRpmPackage;
use strict;

#---------------------------------------------------------------------
#                        parse_depends_range                           
# 
# Parse FW_PACKAGE_DEPENDENCIES, which is in debian binary
# dependency format.  Returns the dependencies along with 
# implied range dependencies if otherwise unspecified.
#
# NB: this version is different than the version in package/deb 
# rpm cannot handle disjunctive dependencies, so we need to pick 
# one element of the disjunction :(
# we will require the builder to have installed one of the choices
#---------------------------------------------------------------------

sub parse_depends_range ($$)
  {
    my ($state, $depends) = @_;

# libc6 (>= 2.2.1), exim | mail-transport-agent
# erlang (= INSTALLED)

    my $firstspec = 1;
  SPEC:  foreach my $spec (split /\s*,\s*/, $depends)
      {
        print ", " unless $firstspec;
        $firstspec = 0;

        my $p = undef;
        my $op = "";
        my $version = "";
  OPTION: foreach my $option (split /\s*\|\s*/, $spec)
          {
            my ($not, $restrict);
          PARSE_OPTION: {
              $option =~ # DEB FORMAT
                m/^(\S+)   # package name
                  \s*
                  (?:      # optional version specification: "( OP VERSION )"
                    \( \s* (<<|<=|>=|>>|<(?!=)|=|>(?!=)) \s* ([^\s\)]+) \s* \)
                  )?
                  \s*
                  (?:      # optional architecture specification: "[ ARCH ]" or "[ ! ARCH ]"
                    \[ \s* (!)? \s* ([^\s\!\]]+) \s* \]
                  )?
                  \s*$/x and do {
                    $p = $1;
                    $op = $2;
                    $version = (not defined $3) ? '' : $3 eq 'INSTALLED' ? $state->{$p} : $3;
                    $not = $4;
                    $restrict = $5;
#                    no warnings 'uninitialized';
#                    print STDERR "deb $option -> $p $op $version $not $restrict\n";
                    last PARSE_OPTION;
                  };
              $option =~ # RPM FORMAT
                m/^(\S+)   # package name
                  \s*
                  (?:      # optional version specification: "OP VERSION"
                    (<<|<=|>=|>>|<(?!=)|=|>(?!=)) \s* ([^\s\)]+)
                  )?
                  \s*$/x and do {
                    $p = $1;
                    $op = $2;
                    $version = (not defined $3) ? '' : $3 eq 'INSTALLED' ? $state->{$p} : $3;
#                    no warnings 'uninitialized';
#                    print STDERR "rpm $option -> $p $op $version\n";
                    last PARSE_OPTION;
                  };
              die "can't parse dependencies '$depends' (option '$option')";
            }
 #            next OPTION unless exists $state->{$p};

            if (   defined ($op) && $op ne "" 
                && defined ($version) && $version ne "")
              {
                print "$p ($op $version)";
              }
            else
              {
#                print "$p (>= $state->{$p})";
                if ($state->{$p})
                  {
                    print "$p (>= $state->{$p})";
                  }
# TODO: what about reverse provides (?)
                elsif (my $rev_p = reverse_provides ($state, $p))
                  {
                    print "$rev_p (>= $state->{$rev_p})";
                  }
                else
                  {
                    next OPTION;
                  }
              }

            next SPEC;
          }

        die "can't resolve disjunction '$spec': you must install one of the choices.\n"
      }
  }

#---------------------------------------------------------------------
#                                main                                 
#---------------------------------------------------------------------

my $usage = "usage: $0 depends\n";

my $depends = $ARGV[0] or die $usage;

my ($state, undef) = get_state ();

my $packages = parse_depends_range ($state, $depends);
